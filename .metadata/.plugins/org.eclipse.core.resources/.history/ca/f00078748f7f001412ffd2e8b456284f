
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;


public class Fresh extends JFrame implements ActionListener{

	String aboutMe = "Samarth Shah \n ICSI 660: Security and Privacy \n sshah4@albny.edu \n University at Albany, NY";
	
	FileNameExtensionFilter ext = new FileNameExtensionFilter("Image file", "JPEG", "JPG", "jpeg", "jpg");
	
	Random rand = new Random();
	JFrame jf = new JFrame();
	JButton loadImage = new JButton("Load Image");
	JButton create = new JButton("Create 5 Shares");
	JButton reconstruct = new JButton("Reconstruct Image");
	JButton aboutDev = new JButton("About Dev");
	JButton quit = new JButton("Quit");
	BufferedImage image;
	
	ImageIcon i = new ImageIcon(getClass().getResource("/photo.jpg"));
	JLabel img = new JLabel(i);
	
	int width, height, a1, total1, new_pixel;
	int q = 251;
	
//	int new_pixel1[] = new int(1100);
	
	public Fresh() {
		// TODO Auto-generated constructor stub
	Container c = getContentPane();
	c.setLayout(new FlowLayout());
	
	JPanel menu = new JPanel();
	
	JPanel originalImage = new JPanel();
	originalImage.add(img);
	
	JPanel share1Pan = new JPanel();
	JPanel share2Pan = new JPanel();
	JPanel share3Pan = new JPanel();
	JPanel share4Pan = new JPanel();
	JPanel share5Pan = new JPanel();
	JPanel rePan = new JPanel();
//	img = new JLabel();
//	JPanel panel = new JPanel();
//	JLabel jl; 
//		
	menu.setBorder(BorderFactory.createTitledBorder("Stuff:"));
    menu.setPreferredSize(new Dimension(200,220));   
	originalImage.setBorder(BorderFactory.createTitledBorder("Original Image:"));
	originalImage.setPreferredSize(new Dimension(200,220));
	 share1Pan.setBorder(BorderFactory.createTitledBorder("Image Share 1:"));
	 share1Pan.setPreferredSize(new Dimension(200,220));
	 share2Pan.setBorder(BorderFactory.createTitledBorder("Image Share 2:"));
	 share2Pan.setPreferredSize(new Dimension(200,220));
	 share3Pan.setBorder(BorderFactory.createTitledBorder("Image Share 3:"));
	 share3Pan.setPreferredSize(new Dimension(200,220));
	 share4Pan.setBorder(BorderFactory.createTitledBorder("Image Share 4:"));
	 share4Pan.setPreferredSize(new Dimension(200,220));
	 share5Pan.setBorder(BorderFactory.createTitledBorder("Image Share 5:"));
	 share5Pan.setPreferredSize(new Dimension(200,220));
	 rePan.setBorder(BorderFactory.createTitledBorder("Reconstructed Image:"));
	 rePan.setPreferredSize(new Dimension(200,220));
	 
	 getContentPane().setLayout(new FlowLayout());
	 
	 menu.add(loadImage);
	 menu.add(create);
	 menu.add(reconstruct);
	 menu.add(aboutDev);
	 menu.add(quit);
	 
	
	 c.add(originalImage);
	 c.add(share1Pan);
	 c.add(share2Pan);
	 c.add(share3Pan);
	 c.add(share4Pan);
	 c.add(share5Pan);
	 c.add(rePan);
	 c.add(menu);
	 
	
//	 loadImage.addActionListener(this);
	 create.addActionListener(this);
	 reconstruct.addActionListener(this);
	 aboutDev.addActionListener(this);
	 quit.addActionListener(this);
	 
	 
	 setTitle("Security Project");
	 setSize(840, 480);
	 setResizable(false);
	 jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	 addWindowListener(new WindowAdapter() {public void windowClosing(WindowEvent e) {System.exit(0);}});
	 }
	 
	public void getSecret()
	{
//		String path = null;
		String name = null;
		
		   JFileChooser jfc = new JFileChooser();
		    jfc.setFileFilter(ext);
		    int buttonClicked = jfc.showOpenDialog(null);
		    
		    //this checks which button was pressed on the JFileChooser GUI
		    if (buttonClicked == JFileChooser.APPROVE_OPTION) 
		    {
		    File file = jfc.getSelectedFile();	
//		    path = "" + jfc.getCurrentDirectory() + "\\"
//		      	        + (jfc.getSelectedFile().getName()).toLowerCase();
		      name = jfc.getSelectedFile().getName();
		      
		      try
			    {
			    	img.setIcon(new ImageIcon(ImageIO.read(file)));	
			    }
			    catch(Exception e){e.getMessage();}
		    }
		    System.out.println(name);
//		    getImageByName(name);
	}
	
	public void getImageByName(String iname)
	{
		String name = iname;
		System.out.println(name);
		 try {
	         image = ImageIO.read(getClass().getResource("/images/DSC07364.JPG"));
	            width  = image.getWidth(null);
	            height = image.getHeight(null);
	            System.out.println(width+" "+height);
            	displayImage();
		 }
	
			 // try to read from file in working directory
//	            File file = new File(name);
//	            if (file.isFile()) {
//	                System.out.println("image is read");
//	            }
//
//	            // now try to read from file in same directory as this .class file
//	            else {
//	                URL url = getClass().getResource(name);
//	                if (url == null) { url = new URL(name); }
//	                image = ImageIO.read(url);
//	            }
	        catch (IOException e) {
	            // e.printStackTrace();
	            throw new RuntimeException("Could not open file: " +name);
	        }
	}

	public void displayImage()
	{
		System.out.println("c");
	}
	
	public void marchThroughImage(BufferedImage image)
	 {
	    int w = image.getWidth();
	    int h = image.getHeight();
	    System.out.println("width, height: " + w + ", " + h);
	    int[][] pixels = new int[w][h];
	 
	    for (int i = 0; i < h; i++) 
	    {
	      for (int j = 0; j < w; j++) 
	      {
//	        System.out.println("x,y: " + j + ", " + i);
	        int pixel = image.getRGB(j, i);
//	        int alpha = (pixel >> 24) & 0xff;
	        int red = (pixel >> 16) & 0xff;
	        int green = (pixel >> 8) & 0xff;
	        int blue = (pixel) & 0xff;
		        
	        int navo_pixel = share1(red, green, blue);
//	        check here..
	        pixels[j][i] = navo_pixel;
	      }
	    }
	   System.out.println("out of loops");
	   List<Integer> p = new ArrayList<Integer>();
	   for (int i = 0; i < pixels.length; i++) 
	   {
	        for (int j = 0; j < pixels[i].length; j++) 
	        { 
	            p.add(pixels[i][j]); 
	        }
	    }

	    int[] pixelvector = new int[p.size()];
	    for (int i = 0; i < pixelvector.length; i++)
	    {
	    	pixelvector[i] = p.get(i);
	    }
	   BufferedImage image_share1 = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
	   image_share1.getRaster().setPixels(0, 0, w, h, pixelvector);
	   System.out.println("fucking success");
	 }
	
	public int share1(int r, int g, int b)
	{
		a1 = rand.nextInt(q);
		total1 = r+g+b+a1;
		new_pixel = total1 % q;
//		System.out.println("New pixel value: " +new_pixel);
		return new_pixel;
	}
	public void actionPerformed (ActionEvent ae)
	{
		if (ae.getSource() == loadImage)    
	    {
		getSecret();
	    }
		
		
		else if (ae.getSource() == create)    
	    {
			//code for creating 5 shares here
		try{
			BufferedImage image = ImageIO.read(getClass().getResource("/photo.jpg"));
			marchThroughImage(image);
			}
		catch(Exception e)
			{
			e.getMessage();
			}
	    }
		
		else if (ae.getSource() == reconstruct)    
	    {}
		else if (ae.getSource() == aboutDev)    
	    {
			JOptionPane.showMessageDialog(null, aboutMe);
	    }
		else if (ae.getSource() == quit)    
	    {System.exit(0);}
	    	
	}
	
	public static void main(String[] foo) {
			Fresh f = new Fresh();
			f.setVisible(true);
			f.setTitle("cc");}
		
//	SwingUtilities.invokeLater(new Runnable() 
//		{public void run() 
//			{
//			Fresh gui = new Fresh();
//			gui.setVisible(true);
//			}
//		});
//	}
		};